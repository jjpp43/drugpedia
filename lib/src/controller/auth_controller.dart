import 'package:get/get.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthController extends GetxController {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();

  final Rx<User?> _user = Rx<User?>(null);
  User? get user => _user.value;

  @override
  void onInit() {
    super.onInit();
    _user.bindStream(_firebaseAuth.authStateChanges());
  }

  Future<void> signInWithGoogle() async {
    try {
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      final GoogleSignInAuthentication googleAuth =
          await googleUser!.authentication;
      final OAuthCredential credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );
      final UserCredential userCredential =
          await _firebaseAuth.signInWithCredential(credential);
      final User? user = userCredential.user;
      if (user != null) {
        // Assign user to Rx<User?>
        _user.value = user;
        await saveUser();
      }
    } catch (error) {
      print("Google sign-in error: $error");
    }
  }

  /// When storing the user ID in Firestore,
  /// it is recommended to use the user.uid value provided by Firebase Authentication.
  /// The user.uid is a unique identifier generated by Firebase
  /// for each user and is associated with the authenticated user in Firebase Authentication.
  Future saveUser() async {
    final userCollection = FirebaseFirestore.instance.collection('users');
    final userDoc = userCollection.doc(user?.uid);
    final userSnapshot = await userDoc.get();

    if (!userSnapshot.exists) {
      userDoc.set({
        'createdAt': DateTime.now(),
        'userId': user?.uid,
        'username': user?.displayName,
        'email': user?.email,
        'photoUrl': user?.photoURL,
      });
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
    await _googleSignIn.signOut();
  }

  String getCurrentUserId() {
    return user?.uid ?? '';
  }

  String getCurrentUsername() {
    return user?.displayName ?? '';
  }

  Future<User?> getUserInfo() async {
    final User? currentUser = _firebaseAuth.currentUser;
    if (currentUser != null) {
      return currentUser;
    } else {
      // If the user is not logged in, sign in with Google
      await signInWithGoogle();
      return _firebaseAuth.currentUser;
    }
  }
}
